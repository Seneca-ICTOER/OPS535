"use strict";(self.webpackChunkOPS535=self.webpackChunkOPS535||[]).push([[2124],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)t=a[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,s=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),d=l(t),f=o,m=d["".concat(s,".").concat(f)]||d[f]||p[f]||a;return t?r.createElement(m,i(i({ref:n},u),{},{components:t})):r.createElement(m,i({ref:n},u))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,i=new Array(a);i[0]=d;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var l=2;l<a;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},4903:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return p},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return l}});var r=t(3117),o=(t(7294),t(3905));const a={id:"get-root-zone",title:"Get Root Zone",sidebar_position:24,description:"Get Root Zone"},i="Get Root Zone",c={unversionedId:"C-ExtraResources/get-root-zone",id:"C-ExtraResources/get-root-zone",title:"Get Root Zone",description:"Get Root Zone",source:"@site/docs/C-ExtraResources/get-root-zone.md",sourceDirName:"C-ExtraResources",slug:"/C-ExtraResources/get-root-zone",permalink:"/OPS535/C-ExtraResources/get-root-zone",draft:!1,editUrl:"https://github.com/Seneca-ICTOER/OERTemplate/tree/main/docs/C-ExtraResources/get-root-zone.md",tags:[],version:"current",sidebarPosition:24,frontMatter:{id:"get-root-zone",title:"Get Root Zone",sidebar_position:24,description:"Get Root Zone"},sidebar:"courseNotesSidebar",previous:{title:"Network Address",permalink:"/OPS535/C-ExtraResources/network-address"},next:{title:"Domainreg",permalink:"/OPS535/C-ExtraResources/domainreg"}},s={},l=[{value:"Bash Script",id:"bash-script",level:2},{value:"Sample Output",id:"sample-output",level:2}],u={toc:l};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"get-root-zone"},"Get Root Zone"),(0,o.kt)("h2",{id:"bash-script"},"Bash Script"),(0,o.kt)("p",null,"Sample Bash script for extracting Domain Registration page ",(0,o.kt)("a",{parentName:"p",href:"/OPS535/C-ExtraResources/domainreg"},"Domainreg")," and create a root zone file. Set the following shell (environment) variables before running the script to produce a customized zone file header for that root zone that match your DNS server:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"RNS_FQDN - set this to the fully qualified domain name of your root name server.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export RNS_FQDN=rns.cp.net\n")),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"RNS_IP - set this to the IP address of your root name server."),(0,o.kt)("li",{parentName:"ul"},"DNS_ADMIN_EMAIL - set this to the email address of your DNS administrator")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"export DNS_ADMIN_EMAIL=admin.cp.net\n")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'#!/bin/bash\n# Created by: Raymond Chan\n# for OPS535\n# (c) 2016 - update for new wiki site\n# (c) 2017 - update to prompt user to set the followings\n#        fqdn,ip for root name server\n#        email for dns admin\n#   RNS_FQDN, RNS_IP, DNS_ADMIN_EMAIL\n# (c) 2020 - update for the new wiki url\n#\nif [ -z "${RNS_FQDN}" ]\nthen\n    echo "Please set the shell variable RNS_FQDN to the FQDN of your" >&2\n    echo "root name server and run this script again." >&2\n    exit 1\nfi\n\nif [ -z "${RNS_IP}" ]\nthen\n    echo "Please set the shell variable RNS_IP to the IP address" >&2\n        echo "of your root name server and run this script again." >&2\n    exit 2\nfi\n\nif [ -z "${DNS_ADMIN_EMAIL}" ]\nthen\n    echo "Please set the shell variable DNS_ADMIN_EMAIL to the" >&2\n    echo "email address of your DNS administrator and run this" >&2\n        echo "script again." >&2\n    exit 3\nfi\n# start loading dns information from the web\nurl=https://wiki.cdot.senecacollege.ca/w/index.php/Domainreg\n\nif [ ! -f raw.txt ]\nthen\n    echo "Gettting wiki file from the web ..." >&2\n    wget -O raw.txt $url\nfi\n\nbuffer=$(cat raw.txt| grep ^\'<td>\')\n\nnl=$(echo "$buffer"|wc -l)\na=0\nb=6\n# generating the zone file header\nSN=$(date +%y%j%H) # yydddHH\necho "\\$TTL 3600"\necho "@ IN SOA ${RNS_FQDN} ${DNS_ADMIN_EMAIL} (${SN} 1h 15m 30d 1h)"\necho "      IN NS ${RNS_FQDN}"\necho "${RNS_FQDN} IN A ${RNS_IP}"\n\nwhile [ $a -lt $nl ]\ndo\n    stuff=$(echo "$buffer"| head -"$b" | tail -5|nl|sed -e "s/<td>/x/g")\n    #  echo "$stuff"\n    fields=$(echo "$stuff"|sed -e "s/ //g"|awk -Fx {\'print $2\'})\n\n    parameters=$(echo $fields)\n    cc=$(echo $parameters | wc -w)\n        # echo "paratest cc is $cc"\n\n    if [ "$cc" -gt 0 ]\n    then    \n        #echo $a $parameters\n        #read yyy   \n        set $parameters\n        if [ "$1" != "domainname" ]\n        then\n            if [ "$1" != "" -a "$3" != "" -a "$4" != "" ]\n            then\n\n                echo -e "${1}. \\tIN \\tNS \\t$4."\n                echo -e "${4}. \\tIN \\tA \\t$3"\n                echo " "\n    \n            fi\n        fi\n    fi\n\n    let a=a+6\n    let b=b+6\n\n    #read xxx\ndone\n')),(0,o.kt)("h2",{id:"sample-output"},"Sample Output"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"$TTL 3600\n@ IN SOA rns.cp.net. admin.cp.net. (1735109 1h 15m 30d 1h)\n      IN NS rns.cp.net.\nrns.cp.net. IN A 192.168.99.253\ncp.net.     IN  NS  ns.cp.net.\nns.cp.net.  IN  A   192.168.99.1\n \nRaymond.com.    IN  NS  ns.raymond.com.\nns.raymond.com.     IN  A   192.168.98.53\n \ngcyao.net.  IN  NS  pri-dns.gcyao.net.\npri-dns.gcyao.net.  IN  A   192.168.33.53\n \nbdgushue.com.   IN  NS  pri-dns.bdgushue.com.\npri-dns.bdgushue.com.   IN  A   192.168.14.53\n \ndcwood.com.     IN  NS  pri-dns.dcwood.com.\npri-dns.dcwood.com.     IN  A   192.168.32.53\n \nfalli2.com.     IN  NS  pri-dns.falli2.com.\npri-dns.falli2.com.     IN  A   192.168.2.53\n \ntnemat.com.     IN  NS  a2-dns.tnemat.com.\na2-dns.tnemat.com.  IN  A   192.168.25.53\n \naccarneirobrandao.net.  IN  NS  pri-dns.accarneirobrandao.net.\npri-dns.accarneirobrandao.net.  IN  A   192.168.7.53\n")))}p.isMDXComponent=!0}}]);